{
  {
    "package",
    "local function isGood(a,b)\
    if ((not a) or (not b)) then\
        error(\"pack/unpack <input> <output>\")\
    end\
    if not fs.exists(a) then\
        error(\"Invalid input location\")\
    end\
end\
local function subList(l,a,b)\
    local out = {}\
    for i = a,b do\
        out[#out+1] = l[i]\
    end\
    return out\
end\
local function joinL(...)\
    local lists = {...}\
    local out = {}\
    for a = 1,#lists do\
        for b = 1,#lists[a] do\
            out[#out+1] = lists[a][b]\
        end\
    end\
    return out\
end\
local function replList(a,i,b)\
    local l1 = subList(a,1,i-1)\
    local l2 = subList(a,i+1,#a)\
    return joinL(l1,b,l2)\
end\
function getSub(path,extra)\
    local l = fs.list(path)\
    local offset = 0\
    for a = 1,#l do\
        i = a+offset\
        --print(fs.combine(path,l[i]),fs.isDir(fs.combine(path,l[i])))\
        if fs.isDir(fs.combine(path,l[i])) then\
            local oldlen = #l\
            l = replList(l,i,getSub(fs.combine(path,l[i]),fs.combine(extra,l[i])))\
            offset = offset+(#l-oldlen)\
        else\
            l[i] = fs.combine(extra,l[i])\
        end\
    end\
    return l\
end\
function pack(inp,out)\
    isGood(inp,out)\
    local files = getSub(inp,\"\")\
    local output = {}\
    for i = 1,#files do\
        local f = fs.open(fs.combine(inp,files[i]),\"r\")\
        local str = f.readAll()\
        f.close()\
        output[#output+1] = {files[i],str}\
    end\
    local f = fs.open(out,\"w\")\
    f.write(textutils.serialize(output))\
    f.close()\
end\
local function unpack(inp,out)\
    isGood(inp,out)\
    local f = fs.open(inp,\"r\")\
    local tbl = textutils.unserialize(f.readAll())\
    f.close()\
    for i = 1,#tbl do\
        local f = fs.open(fs.combine(out,tbl[i][1]),\"w\")\
        f.write(tbl[i][2])\
        f.close()\
    end\
end\
local tArgs = {...}\
pack(tArgs[1], tArgs[2])",
  },
  {
    "unpackage",
    "local function isGood(a,b)\
    if ((not a) or (not b)) then\
        error(\"pack/unpack <input> <output>\")\
    end\
    if not fs.exists(a) then\
        error(\"Invalid input location\")\
    end\
end\
local function subList(l,a,b)\
    local out = {}\
    for i = a,b do\
        out[#out+1] = l[i]\
    end\
    return out\
end\
local function joinL(...)\
    local lists = {...}\
    local out = {}\
    for a = 1,#lists do\
        for b = 1,#lists[a] do\
            out[#out+1] = lists[a][b]\
        end\
    end\
    return out\
end\
local function replList(a,i,b)\
    local l1 = subList(a,1,i-1)\
    local l2 = subList(a,i+1,#a)\
    return joinL(l1,b,l2)\
end\
function getSub(path,extra)\
    local l = fs.list(path)\
    local offset = 0\
    for a = 1,#l do\
        i = a+offset\
        --print(fs.combine(path,l[i]),fs.isDir(fs.combine(path,l[i])))\
        if fs.isDir(fs.combine(path,l[i])) then\
            local oldlen = #l\
            l = replList(l,i,getSub(fs.combine(path,l[i]),fs.combine(extra,l[i])))\
            offset = offset+(#l-oldlen)\
        else\
            l[i] = fs.combine(extra,l[i])\
        end\
    end\
    return l\
end\
function pack(inp,out)\
    isGood(inp,out)\
    local files = getSub(inp,\"\")\
    local output = {}\
    for i = 1,#files do\
        local f = fs.open(fs.combine(inp,files[i]),\"r\")\
        local str = f.readAll()\
        f.close()\
        output[#output+1] = {files[i],str}\
    end\
    local f = fs.open(out,\"w\")\
    f.write(textutils.serialize(output))\
    f.close()\
end\
local function unpack(inp,out)\
    isGood(inp,out)\
    local f = fs.open(inp,\"r\")\
    local tbl = textutils.unserialize(f.readAll())\
    f.close()\
    for i = 1,#tbl do\
        local f = fs.open(fs.combine(out,tbl[i][1]),\"w\")\
        f.write(tbl[i][2])\
        f.close()\
    end\
end\
local tArgs = {...}\
unpack(tArgs[1], tArgs[2])",
  },
}
